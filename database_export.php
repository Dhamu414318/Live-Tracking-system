<?php
/**
 * Database Export Script
 * Exports data from XAMPP MySQL to PostgreSQL format for Render deployment
 */

// XAMPP MySQL connection
$mysqlHost = 'localhost';
$mysqlUser = 'root';
$mysqlPass = '';
$mysqlDb = 'test';

try {
    // Connect to XAMPP MySQL
    $pdo = new PDO("mysql:host=$mysqlHost;dbname=$mysqlDb", $mysqlUser, $mysqlPass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    echo "✅ Connected to XAMPP MySQL database: $mysqlDb\n";
    
    // Get all tables
    $tables = [];
    $stmt = $pdo->query("SHOW TABLES");
    while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
        $tables[] = $row[0];
    }
    
    echo "📋 Found tables: " . implode(', ', $tables) . "\n\n";
    
    // Create SQL file for PostgreSQL
    $sqlFile = 'database_export.sql';
    $handle = fopen($sqlFile, 'w');
    
    // Write PostgreSQL header
    fwrite($handle, "-- PostgreSQL Database Export for Render\n");
    fwrite($handle, "-- Generated from XAMPP MySQL on " . date('Y-m-d H:i:s') . "\n\n");
    
    // Export each table
    foreach ($tables as $table) {
        echo "📤 Exporting table: $table\n";
        
        // Get table structure
        $stmt = $pdo->query("DESCRIBE `$table`");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Create table structure for PostgreSQL
        fwrite($handle, "-- Table structure for $table\n");
        fwrite($handle, "CREATE TABLE IF NOT EXISTS \"$table\" (\n");
        
        $columnDefs = [];
        foreach ($columns as $column) {
            $name = $column['Field'];
            $type = $column['Type'];
            $null = $column['Null'] === 'YES' ? 'NULL' : 'NOT NULL';
            $default = $column['Default'] ? "DEFAULT '{$column['Default']}'" : '';
            $extra = $column['Extra'];
            
            // Convert MySQL types to PostgreSQL
            $pgType = convertMySqlTypeToPostgres($type);
            
            $def = "\"$name\" $pgType $null $default";
            if ($extra === 'auto_increment') {
                $def .= ' GENERATED BY DEFAULT AS IDENTITY';
            }
            
            $columnDefs[] = $def;
        }
        
        fwrite($handle, "    " . implode(",\n    ", $columnDefs) . "\n);\n\n");
        
        // Get table data
        $stmt = $pdo->query("SELECT * FROM `$table`");
        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        if (!empty($rows)) {
            fwrite($handle, "-- Data for $table\n");
            
            foreach ($rows as $row) {
                $columns = array_keys($row);
                $values = array_values($row);
                
                // Escape values for PostgreSQL
                $escapedValues = array_map(function($value) {
                    if ($value === null) {
                        return 'NULL';
                    }
                    return "'" . str_replace("'", "''", $value) . "'";
                }, $values);
                
                fwrite($handle, "INSERT INTO \"$table\" (\"" . implode('", "', $columns) . "\") VALUES (" . implode(', ', $escapedValues) . ");\n");
            }
            fwrite($handle, "\n");
        }
        
        echo "   ✅ Exported " . count($rows) . " rows\n";
    }
    
    fclose($handle);
    
    echo "\n✅ Database export completed!\n";
    echo "📁 File saved as: $sqlFile\n";
    echo "📋 Total tables exported: " . count($tables) . "\n";
    echo "\n🚀 Next steps:\n";
    echo "1. Upload this file to Render database\n";
    echo "2. Or use the data in your deployment\n";
    
} catch (PDOException $e) {
    echo "❌ Error: " . $e->getMessage() . "\n";
}

function convertMySqlTypeToPostgres($mysqlType) {
    $type = strtolower($mysqlType);
    
    // Remove length specifications for now
    $type = preg_replace('/\(\d+\)/', '', $type);
    
    $conversions = [
        'int' => 'INTEGER',
        'bigint' => 'BIGINT',
        'smallint' => 'SMALLINT',
        'tinyint' => 'SMALLINT',
        'varchar' => 'VARCHAR',
        'char' => 'CHAR',
        'text' => 'TEXT',
        'longtext' => 'TEXT',
        'mediumtext' => 'TEXT',
        'tinytext' => 'TEXT',
        'datetime' => 'TIMESTAMP',
        'timestamp' => 'TIMESTAMP',
        'date' => 'DATE',
        'time' => 'TIME',
        'year' => 'INTEGER',
        'decimal' => 'DECIMAL',
        'float' => 'REAL',
        'double' => 'DOUBLE PRECISION',
        'boolean' => 'BOOLEAN',
        'bool' => 'BOOLEAN',
        'json' => 'JSON',
        'blob' => 'BYTEA',
        'longblob' => 'BYTEA',
        'mediumblob' => 'BYTEA',
        'tinyblob' => 'BYTEA',
    ];
    
    return $conversions[$type] ?? 'TEXT';
}
?> 